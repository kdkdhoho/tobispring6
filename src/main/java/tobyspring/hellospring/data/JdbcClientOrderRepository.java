package tobyspring.hellospring.data;

import jakarta.annotation.PostConstruct;
import java.util.Optional;
import javax.sql.DataSource;
import org.springframework.jdbc.core.simple.JdbcClient;
import tobyspring.hellospring.order.Order;
import tobyspring.hellospring.order.OrderRepository;

public class JdbcClientOrderRepository implements OrderRepository {

    private final JdbcClient jdbcClient;

    public JdbcClientOrderRepository(DataSource dataSource) {
        this.jdbcClient = JdbcClient.create(dataSource);
    }

    @PostConstruct
    void initDatabase() {
        jdbcClient.sql("""
                       CREATE TABLE orders
                       (
                           id          BIGINT GENERATED BY DEFAULT AS IDENTITY,
                           order_number VARCHAR(255),
                           total_amount NUMERIC(38, 2),
                           PRIMARY KEY (id)
                       );
                       
                       ALTER TABLE if EXISTS orders DROP CONSTRAINT IF EXISTS unique_orders_order_number;
                       ALTER TABLE if EXISTS orders ADD CONSTRAINT unique_orders_order_number UNIQUE (order_number);
                       CREATE SEQUENCE orders_seq START WITH 1 INCREMENT BY 50;
                       """).update();
    }

    @Override
    public void save(Order order) {
        Long id = jdbcClient.sql("SELECT next value FOR orders_seq").query(Long.class).single();
        order.setId(id);
        jdbcClient.sql("INSERT INTO orders (order_number, total_amount, id) VALUES (?, ?, ?)")
                .params(order.orderNumber(), order.totalAmount(), id)
                .update();
    }

    @Override
    public Optional<Order> findById(Long id) {
        return jdbcClient.sql("SELECT * FROM orders WHERE id = ?")
                .param(id)
                .query(Order.class)
                .optional();
    }
}
